float4x4 World;
float4x4 ViewProj;
float4 Color = float4(1,1,1,1);
texture Gradient;
texture Texture;
float2 GradientBegin;
float2 GradientEnd;
float2 Size;
float4 ColorMul;

sampler GradientSMP = sampler_state
{
	texture = <Gradient>;
	filter = linear;
	addressu = clamp;
};

sampler TextureSMP = sampler_state
{
	texture = <Texture>;
	filter = linear;
	addressu = wrap;
	addressv = wrap;
};

struct VS_IN
{
	float3 position : POSITION;
	float3 normal : NORMAL;
	float2 uv : TEXCOORD;
	float4 color : COLOR;
};

struct PS_IN
{
	float4 position : POSITION;
	float3 normal : TEXCOORD0;
	float2 uv : TEXCOORD1;
	float4 color : TEXCOORD2;
	float4 scrPos : TEXCOORD3;
};

PS_IN VS(VS_IN input)
{
	PS_IN output = (PS_IN)0;
	float4 wpos = mul(float4(input.position,1), World);
	output.position = mul(wpos, ViewProj);
	output.normal = normalize(mul(float4(input.normal,0), World));
	output.uv = input.uv;
	output.color = input.color;
	output.scrPos = output.position;
	return output;
}

float4 PS(PS_IN input) : COLOR
{
	return Color * ColorMul;
}

float4 PS_LG(PS_IN input) : COLOR
{

	float2 pos = float2((input.scrPos.x + 1)*0.5*Size.x,(1 - input.scrPos.y)*0.5*Size.y);

	float2 gb = GradientBegin;
	float2 ge = GradientEnd;

	float u = dot(pos-gb,ge-gb) / ( dot(gb-ge,ge-gb) * dot(gb-ge,ge-gb) );
	float2 v = gb + (gb - ge)*u;

	float uvu = -dot(v-gb,ge-gb);	

	float2 uv = float2(uvu,0.5);

	return tex2D(GradientSMP, uv) * ColorMul;
}

float4 PS_RG(PS_IN input) : COLOR
{
	float2 pos = float2((input.scrPos.x + 1)*0.5*Size.x,(1 - input.scrPos.y)*0.5*Size.y);

	float2 gb = GradientBegin;
	float2 ge = GradientEnd;

	pos.x /= (ge.x - gb.x);
	pos.y /= (ge.y - gb.y);

	float uvu = distance(pos, float2(gb.x/(ge.x-gb.x),gb.y/(ge.y-gb.y)));

	float2 uv = float2(uvu,0.5);

	return tex2D(GradientSMP, uv) * ColorMul;
}

float4 PS_CG(PS_IN input) : COLOR
{
	float2 pos = float2((input.scrPos.x + 1)*0.5*Size.x,(1 - input.scrPos.y)*0.5*Size.y);

	float2 gb = GradientBegin;
	float2 ge = GradientEnd;

	pos.x /= (ge.x - gb.x);
	pos.y /= (ge.y - gb.y);

	float2 trn = float2(gb.x/(ge.x-gb.x),gb.y/(ge.y-gb.y));
	//float2 trn = gb;

	float uvu = (atan2((pos.x-trn.x),(pos.y-trn.y)) + 3.1415)/(3.1415 * 2.0);

	float2 uv = float2(uvu,0.5);

	return tex2D(GradientSMP, uv) * ColorMul;
}

float scale(float x, float a, float b, float c, float d)
{
	float s = (x-a)/(b-a);
	return s*(d-c)+c;
}

float4 PS_TP(PS_IN input) : COLOR
{
	float2 pos = float2((input.scrPos.x + 1)*0.5*Size.x,(1 - input.scrPos.y)*0.5*Size.y);

	float2 gb = GradientBegin;
	float2 ge = GradientEnd;

	float2 uv = float2(scale(pos.x, gb.x, ge.x, 0, 1), scale(pos.y, gb.y, ge.y, 0, 1));

	return tex2D(TextureSMP, uv) * ColorMul;
}

technique SolidColor
{
	pass
	{
		VertexShader = compile vs_3_0 VS();
		PixelShader = compile ps_3_0 PS();
	}
}

technique LinearGradient
{
	pass
	{
		VertexShader = compile vs_3_0 VS();
		PixelShader = compile ps_3_0 PS_LG();
	}
}

technique RadialGradient
{
	pass
	{
		VertexShader = compile vs_3_0 VS();
		PixelShader = compile ps_3_0 PS_RG();
	}
}

technique ConeGradient
{
	pass
	{
		VertexShader = compile vs_3_0 VS();
		PixelShader = compile ps_3_0 PS_CG();
	}
}

technique TexturePattern
{
	pass
	{
		VertexShader = compile vs_3_0 VS();
		PixelShader = compile ps_3_0 PS_TP();
	}
}